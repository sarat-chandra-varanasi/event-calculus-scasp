#include 'bec_original.lp'.


max_time(20).

%happens(in,Var0) :-
%     happens(approach,Var1),
%     Var0-Var1 #>= 2.

happens(in, 3).

happens(lower,Var0) :-
     happens(approach,Var1),
     Var0 #= Var1+1.

happens(closegate,Var0) :-
     happens(lower,Var1),
     Var0-Var1 #< 1,
     Var0 #> Var1.

%happens(exit,Var0) :-
%     happens(approach,Var1),
%     Var0-Var1 #< 5,
%     Var0 #> Var1,
%     happens(in, Var2), 
%     Var0 #> Var2.
 
happens(exit, 6).


happens(raise,Var0) :-
     happens(exit,Var1),
     Var0-Var1 #< 1,
     Var0 #> Var1.

happens(opengate,Var0) :-
     happens(raise,Var1),
     Var0 #> Var1+1,
     Var0 #< Var1+2.

event(approach).
event(in).
event(exit).

initiates(approach,approaching,Var0).
terminates(in,approaching,Var0).

initiates(in,passing,Var0).

terminates(exit,passing,Var0).

initiates(exit,leaving,Var0).

event(raise).
event(lower).
event(opengate).
event(closegate).

terminates(lower,open,Var0).

initiates(lower,lowering,Var0).

terminates(closegate,lowering,Var0).

initiates(closegate,closed,Var0).

terminates(raise,closed,Var0).

initiates(raise,rising,Var0).

terminates(opengate,rising,Var0).

initiates(opengate,open,Var0).

fluent(approaching).
fluent(passing).
fluent(leaving).
fluent(rising).
fluent(open).
fluent(lowering).
fluent(closed).

initiallyP(open).

%initiallyN(approaching).
%initiallyN(passing).
%initiallyN(leaving).
%initiallyN(rising).
%initiallyN(closed).
%initiallyN(lowering).

happens(approach,1).

%?- happens(in, T1), happens(exit, T2), holdsAt(passing, T3).

% ?- happens(in, T1).
% ?- happens(exit, T2).

 ?- holdsAt(passing, T3), happens(exit, T0).

